name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.23.0

      - name: Install govulncheck
        run: go install golang.org/x/vuln/cmd/govulncheck@latest

      - name: Run govulncheck
        run: govulncheck ./...

      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ steps.get_version.outputs.VERSION }}
          draft: false
          prerelease: false

  build:
    name: Build Binaries
    needs: release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
        utility: [am, daily, ggl, ical, obs-fm]
        exclude:
          - goos: windows
            goarch: arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.23.0

      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Build binary
        id: build
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          UTILITY: ${{ matrix.utility }}
          VERSION: ${{ steps.get_version.outputs.VERSION }}
        run: |
          EXTENSION=""
          if [ "$GOOS" = "windows" ]; then
            EXTENSION=".exe"
          fi
          OUTPUT="obsidian-$UTILITY-$GOOS-$GOARCH$EXTENSION"
          go build -v -ldflags="-X 'main.Version=$VERSION'" -o "$OUTPUT" ./cmd/$UTILITY
          if [ "$GOOS" = "windows" ]; then
            zip "$UTILITY-$GOOS-$GOARCH-$VERSION.zip" "$OUTPUT"
            ASSET="$UTILITY-$GOOS-$GOARCH-$VERSION.zip"
          else
            tar -czvf "$UTILITY-$GOOS-$GOARCH-$VERSION.tar.gz" "$OUTPUT"
            ASSET="$UTILITY-$GOOS-$GOARCH-$VERSION.tar.gz"
          fi
          echo "ASSET=$ASSET" >> $GITHUB_OUTPUT

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: ./${{ steps.build.outputs.ASSET }}
          asset_name: ${{ steps.build.outputs.ASSET }}
          asset_content_type: application/octet-stream
